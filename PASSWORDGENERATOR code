import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Clipboard;
import java.security.SecureRandom;

public class PasswordGeneratorApp {

    // Method to generate random password based on user criteria
    private static String generatePassword(int length, boolean useUpper, boolean useLower, boolean useDigits, boolean useSpecial, boolean excludeAmbiguous) {
        StringBuilder characters = new StringBuilder();
        StringBuilder password = new StringBuilder();
        SecureRandom random = new SecureRandom();

        // Define character sets
        String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lower = "abcdefghijklmnopqrstuvwxyz";
        String digits = "0123456789";
        String special = "!@#$%^&*()_-+=<>?";
        String ambiguous = "0O1Il"; // Characters to exclude if selected

        // Add character sets based on user preferences
        if (useUpper) characters.append(upper);
        if (useLower) characters.append(lower);
        if (useDigits) characters.append(digits);
        if (useSpecial) characters.append(special);
        if (excludeAmbiguous) {
            characters = new StringBuilder(characters.toString().replaceAll("[0O1Il]", ""));
        }

        // Generate password
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            password.append(characters.charAt(index));
        }

        return password.toString();
    }

    public static void main(String[] args) {
        // Set up frame
        JFrame frame = new JFrame("Password Generator");
        frame.setSize(500, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new FlowLayout());

        // Create components
        JLabel label = new JLabel("Generated Password:");
        JTextField passwordField = new JTextField(20);
        JLabel lengthLabel = new JLabel("Password Length (8-20):");
        JTextField lengthField = new JTextField(5);
        JCheckBox upperCheck = new JCheckBox("Include Uppercase");
        JCheckBox lowerCheck = new JCheckBox("Include Lowercase");
        JCheckBox digitCheck = new JCheckBox("Include Digits");
        JCheckBox specialCheck = new JCheckBox("Include Special Characters");
        JCheckBox ambiguousCheck = new JCheckBox("Exclude Ambiguous Characters");
        JButton generateButton = new JButton("Generate Password");
        JButton copyButton = new JButton("Copy");

        // Add components to frame
        frame.add(lengthLabel);
        frame.add(lengthField);
        frame.add(upperCheck);
        frame.add(lowerCheck);
        frame.add(digitCheck);
        frame.add(specialCheck);
        frame.add(ambiguousCheck);
        frame.add(label);
        frame.add(passwordField);
        frame.add(generateButton);
        frame.add(copyButton);

        // Action listener to generate password
        generateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    // Get length from user input
                    int length = Integer.parseInt(lengthField.getText());
                    if (length < 8 || length > 20) {
                        JOptionPane.showMessageDialog(frame, "Password length must be between 8 and 20 characters.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Get options from checkboxes
                    boolean useUpper = upperCheck.isSelected();
                    boolean useLower = lowerCheck.isSelected();
                    boolean useDigits = digitCheck.isSelected();
                    boolean useSpecial = specialCheck.isSelected();
                    boolean excludeAmbiguous = ambiguousCheck.isSelected();

                    // Generate the password
                    String password = generatePassword(length, useUpper, useLower, useDigits, useSpecial, excludeAmbiguous);
                    passwordField.setText(password);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "Invalid input. Please enter a valid number for length.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Action listener to copy password to clipboard
        copyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String password = passwordField.getText();
                if (password.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "Please generate a password first.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    StringSelection stringSelection = new StringSelection(password);
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clipboard.setContents(stringSelection, null);
                    JOptionPane.showMessageDialog(frame, "Password copied to clipboard.");
                }
            }
        });

        // Make frame visible
        frame.setVisible(true);
    }
}

